<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>释怀</title>
    <link>https://snowdream87.github.io/</link>
    <description>Recent content on 释怀</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Aug 2019 18:07:22 +0800</lastBuildDate>
    
	<atom:link href="https://snowdream87.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>函数2</title>
      <link>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/%E5%87%BD%E6%95%B02/</link>
      <pubDate>Sun, 04 Aug 2019 18:07:22 +0800</pubDate>
      
      <guid>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/%E5%87%BD%E6%95%B02/</guid>
      <description>匿名函数 匿名函数就是没有函数名的函数（）匿名函数可以看成是类型是func的值
1）语法
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lambda 参数列表:返回值
2）说明
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lambd - 关键字
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;参数列表- 参数名1，&amp;hellip;.
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; : - 固定写法
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 返回值 - 任何有结果的表达式； ，相当于普通函数的return语句
3）参数
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 普通函数中除了用&amp;rsquo;参数名：类型&amp;rsquo;的形式来指定参数类型以外，其他语法匿名函数都能用
变量的作用域 1.变量的作用域：变量在程序中能够使用的范围
2.全局变量和局部变量
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; a.全局变量：没有声明在函数里面或者类里面的变量
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 作用域：从声明开始到文件结束的任何位置
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; b.局部变量：声明在函数中的变量(函数的参数相当于声明在函数中的变量)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 作用域：从声明开始到函数结束的任何位置
3.函数的调用过程(内存)：压栈
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 当调用函数的时候，系统会自动在内存的栈区间为这个函数开辟一个独立的区域用来保存在函数声明的变量。但函数调用结束这个内存会自动释放。
​
4.global和nonlocal，是函数中的关键字和return一样只能在函数体中使用
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1）global - 在函数内声明一个全局变量
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; global 变量
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 变量 = 值
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2）nonlocal - 在局部的局部中去修改局部变量的值
递归 1.什么是递归函数
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;自己调自己的函数(函数体中调用当前函数)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 循环能做的事情递归都可以做
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;注意：能用循环解决的问题就不要用递归
2.怎么写递归
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;第一步：找临界值(循环结束的条件)，在这需要结束函数
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;第二步：找关系 - 找f(n)和f(n-1) 的关系(找当次循环和上次循环的关系)</description>
    </item>
    
    <item>
      <title>函数1</title>
      <link>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/%E5%87%BD%E6%95%B01/</link>
      <pubDate>Sun, 04 Aug 2019 18:04:09 +0800</pubDate>
      
      <guid>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/%E5%87%BD%E6%95%B01/</guid>
      <description>1.什么是函数 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;函数就是对实现特定功能的代码的封装
2.函数的分类 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;系统函数(内置函数) - 系统已经声明好的函数，会用就行
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;自定义函数 - 程序员自己声明的函数
3.声明函数  1）语法：
def 函数名(形参列表):
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 函数声明文档
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 函数体
 2）说明：
def - python中声明函数的关键字
函数名 - 和变量名的要求一样
(): - 固定写法
形参列表 - 以&amp;rsquo;变量名1，变量名2&amp;hellip;&amp;lsquo;的形式存在，有参和无参的可以视情况而定形参的作用就是将函数外面的数据传递到函数里面
函数说明文档 - 用三个双引号引起来的字符串，作用是对函数的功能进行说明
函数体 - 和def保持一个缩进的一行或多行语句。（实现函数功能的多条语句）
 3）初学者声明函数的步骤：
a.确定函数的功能
b.根据函数功能确定函数名
c.确定函数的参数：看实现函数的功能需不需从外面传值
d.实现函数的功能
注意：声明函数的时候不会执行函数体
4.函数的调用 1）语法：
函数名(实参列表)
 2）说明
函数名 - 已经声明过的函数名
（）： - 固定写法
实参列表 - 以&amp;rsquo;值1，值2，&amp;hellip;.&amp;lsquo;形式存在；这儿的每个值就叫实参；
实参是用来给形参赋值的
5.函数调用的过程 1）语法：
函数名(实参列表)
 2）调用函数的作用:执行函数体，获取返回
 3）函数调用的过程
第一步：先回到函数声明的位置
第二步：传参(用实参给形参赋值)</description>
    </item>
    
    <item>
      <title>字符串</title>
      <link>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Sun, 04 Aug 2019 18:00:11 +0800</pubDate>
      
      <guid>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>1.什么是字符串(str)  字符串
字符串是容器类型数据类型(序列)；以单引号或者双引号做为容器的标志，引号在所有的内容都属于字符串元素
&amp;lsquo;abc&amp;rsquo; -&amp;gt; 元分别为‘a’，‘b’，‘c’
特点：不可变，有序(支持下标操作)
 字符串的元素
字符串中的元素又叫字符(注意：python中有字符的概念，但是没有字符类型长度是1的字符串可以看做字符)
 a.普通字符：字母、数字、文字和符号等(可以直接写在引号中的符号)
 b.转义字符：在字符串中在一些特定的符号前加\来表示特殊功能和意义
\&amp;rsquo; - &amp;lsquo;
\n - 换行
\ - 连接
\ - \
\t - tap键
 c.编码字符：\u + 4位16进制数 - 将4位16进制数对应的编码值转换成字符
字符编码：
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 计算机只有直接存储数字的能力，不能直接存储字符；当需要计算机存储字符的时候,实质存的是字符对应的固定数字，这个数字就是字符在计算机中的编码每一个字符和数字的对应关系叫编码表
ASCII码表和Unicode编码表：
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ASCII码表是有美国国家标准指定的专门针对美国符号进行编码的，里面只包含一些特殊符号、字母数字（不包含中文、韩文、日文、）
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; python才用的是Unicode编码表，Unicode编码表是对ASCII码表的扩
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 中文范围：0x4e00 ~ 0x9fa5
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 字符相关的方法：
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chr(编码值) - 将编码值转换成字符
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ord(字符) - 获取字符对应的编码值
 d. 注意：转义字符和编码字符长度都是1
   2.字符相关操作  1.获取字符（和列表获取元素一样）
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1)获取单个字符：字符串[下标]</description>
    </item>
    
    <item>
      <title>字典和集合</title>
      <link>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88/</link>
      <pubDate>Sun, 04 Aug 2019 17:52:36 +0800</pubDate>
      
      <guid>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88/</guid>
      <description>字典 什么是字典（dict）  a.字典是容器型数据类型(序列)，将大括号{ }做为容器的标志，里面多个元素通逗号给开
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;特点：可变(支持增删改)，无序(不支持下标操作)
 b.字典中的元素
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ，以&amp;rsquo;键:值&amp;rsquo;的形式成对出现 - {键1:值1，键2:值2，&amp;hellip;.}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;字典存储数据主要为了存值，键只是为了区分不同的值而存在的 c.要求：
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;键值对中的键 - 键必须不可变；唯一的
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;键值对的值 - 和列表元素一样，任何数据都可以作为值
###字典的增删改查
#####1.查 - 获取字典的值
  1）. 获取单个元素的值
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;字典[key] - 获取字典中指定key对应的值；如果key不存在，会报错
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;字典.get(key) / 字典.get(key，默认值) - 获取字典中指定key对应的值；如果key不存在返回值为None，或默认值
2）.遍历
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for - in 字典直接拿到的是key
dog = {&#39;name&#39;: &#39;毛孩子&#39;, &#39;age&#39;: &#39;2&#39;} print(dog.get(&#39;name&#39;)) # 常用遍历 print(&#39;=============1============&#39;) for key in dog: print(key, dog[key]) # 以下不能用，能看懂就行 print(&#39;=============2============&#39;) for value in dog.values(): print(value) print(&#39;=============3============&#39;) for key, value in dog.</description>
    </item>
    
    <item>
      <title>元组和数字</title>
      <link>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/%E5%85%83%E7%BB%84%E5%92%8C%E6%95%B0%E5%AD%97/</link>
      <pubDate>Sun, 04 Aug 2019 17:51:00 +0800</pubDate>
      
      <guid>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/%E5%85%83%E7%BB%84%E5%92%8C%E6%95%B0%E5%AD%97/</guid>
      <description>列表的相关操作  1.列表的数学运算：+，*
​ 列表1 + 列表2 - 将两个列表中的元素合并参数一个新的列表；（不会修改原列表）
​ 列表 * N - N是整数；列表中的元素重复N次产生一个新的列表
 2.列表的比较运算：==，!=，大小的比较意义不大
​ 列表1 == 列表2 、 列表1 != 列表2
​ 两个列表比较大小，不是比较列表的长度，而是比较元素的大小、
 3.补充：is的用法
​ == -&amp;gt; 判断两个数据的值是否相等
​ is -&amp;gt; 判断两个数据的地址是否一样
 4.in和not in
​ 元素 in 列表 - 判断列表中是否存在指定的元素
​ 元素 not in 列表 - 判断列表中是否不存在指定的元素
 5.内置函数max(序列), min(序列), sum(序列), len(序列)，list(序列)
​ max和min要求系列中的元素类型必须一致：并且元素支持比较运算符
​ sum要求序列中的元素必须是数字
​ 迭代器和生成器不能用len
​ list(序列) - 只有容器型数据才能转换成列表；将序列中的元素做为列表的元素产生一个新的列表
列表的相关方法 1.</description>
    </item>
    
    <item>
      <title>列表</title>
      <link>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/%E5%88%97%E8%A1%A8/</link>
      <pubDate>Sat, 27 Jul 2019 17:36:31 +0800</pubDate>
      
      <guid>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/%E5%88%97%E8%A1%A8/</guid>
      <description>列表 1.什么是列表(list)
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 列表是容器型数据类型(序列),将[]做为容器的标志，多个元素用逗号刚隔开。
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 特点:可变的(指的列表中元素可变，元素支持增删改)、有序的(支持下标操作)
2.声明列表
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 变量名 = [元素1，元素2，元素3，&amp;hellip;..]
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; [] -&amp;gt; 空列表
3.列表中的元素：
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 任何类型的数据都可以作为列表元素：同一个列表中的数据类型可以不一样
4.获取类表中的元素
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 1).获取单个元素
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; a.语法：
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 列表[下标] - 获取列表中指定下标对应的元素
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; b.说明：
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 列表 - 结果是列表的表达式(列表数据、列表变量)
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; [] - 固定写法
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; 下标 - 下标又叫索引；列表中每个元素都有固定的下标值来表示元素在列表的位置</description>
    </item>
    
    <item>
      <title>If分支和循环</title>
      <link>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/if%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Fri, 26 Jul 2019 11:55:38 +0800</pubDate>
      
      <guid>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/if%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF/</guid>
      <description>if分支结构 &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;python分支结构中只有if语句
if 语句 &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;1.满足某个条件才执行的某段代码
a.语法
​ if 条件语句：结果是否为
​ &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;代码段
b.说明：
​ if - 关键字，固定写法
条件语句 - 可以是一个具体的数据，也可以是一个已经赋值过的变量，或者数运算表达式（不能是赋值语句）
: - 固定写法
代码段 - 一条或者多条和if保持一个缩进的语句（任何语句）
c.执行过程： ​ 先判断条件语句的True（如果不是bool就先转换成bool)，如果为True就执行代码段，然后在执行其他语句如果是False，不执行代码段，直接执行其他语句
d.补充： ​ 布尔的转换 - python中所有的数据都能转成布尔，所有为0位空的值都会转换成False
num = random.randint(1, 100) if num &amp;amp; 1 == 1: print(num, &amp;quot;奇数&amp;quot;) #输入年龄，如果输入的年龄大于等于18岁，打印‘可以进网吧’ age = random.randint(1, 50) if age &amp;gt;= 18: print(age, &amp;quot;可以进网吧&amp;quot;) else: print(age, &amp;quot;不可以进网吧&amp;quot;)  2.结构2 满足某个条件执行某段代码，不满足这个条件的时候去执行另外一段代码（if - else）
a.语法：
if 条件语句：
​ &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;代码段1</description>
    </item>
    
    <item>
      <title>Python基础语法2</title>
      <link>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%952/</link>
      <pubDate>Wed, 24 Jul 2019 18:24:28 +0800</pubDate>
      
      <guid>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%952/</guid>
      <description>变量  什么是变量
变量是在程序中开辟空间存储数据用的
 怎么声明变量
 语法： 变量名 = 值（必须赋值） 说明： 变量名 — 程序员自己命名： 要求：是标识符，不能是关键字 规范：遵守PEP8命名规范 - 变量名的所有字母都小写，并且单词 之间都用下划线隔开 见名知意：看见变量名大概知道变量中存储的什么数据   name = &#39;小米&#39; num1 = num print(num, name) # 1.变量必须先声明/赋值在使用 # print(num3) # NameError: name &#39;num3&#39; is not defined # 2.同时声明多个人变量。赋相同的值 a = b = c = 10 print(a, b, c) # 3.同时声明多个变量，赋不同的值：变量名1，变量名2，... = 值1，值2,.... # 注意：变量名要和值的个数保持一致 name, age, sex = &#39;小婷&#39;, 18, &#39;女&#39; print(name, age, sex) &amp;quot;&amp;quot;&amp;quot; 4.</description>
    </item>
    
    <item>
      <title>Python基础语法1</title>
      <link>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%951/</link>
      <pubDate>Tue, 23 Jul 2019 20:21:20 +0800</pubDate>
      
      <guid>https://snowdream87.github.io/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/content/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%951/</guid>
      <description>Python基础语法 &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;一个python文件分为两大部分，注释和编程语句。以及语法规则，基本的输入输出，和常见的数据类型，标识符等
注释 &amp;ensp;&amp;ensp;单行注释
&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;在一行文字的前面加（Ctrl + /）
&amp;ensp;&amp;ensp;多行注释
&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;将注释内容写在三个双引号或者三个单引号（但一般用三个引号）
语句 &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;一行一条语句，若多行则需要用分号分隔，需多行显示加\在换行（但不能破坏数据本身）
缩进 &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;代码开头不能随便加缩进，但需要加缩进的一定要加,如if，for，while等等。
标识符 &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;标识符是用来命名用的。一般是给变量命名，函数命名或者类命名。 标识符规则：所有标识符都必须是有字母、数字、和下划线组成；数字不能开头。
&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;注意：python2.x以后，标识符中可以出现中文、日文、韩文等符号，但实际开发不建议用。
&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;关键字在python有特殊功能和意义的标识符
进制转换 &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;计算机只能存储和处理二进制数据
&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;int类型 - 包含所以的整数，整数可以表示为二进制、八进制、十进制、十六进制。
十进制
a.基数：0 - 9
b.进位：逢10进1
c.位权：111
d.表示方式：直接写
二进制
a.基数：0 - 1
b.进位；逢2进1
c.位权：111(2) = 7(10)
d.表示方式：在二进制前加0b/0B
e.转换：bin()
八进制
a.基数：0 - 7
b.进位；逢8进1
c.位权：111(8) = 73(10)
d.表示方式：在八进制数前加0o/0O
e.转换：oct()
十六进制
a.基数：0 - 9和A - F
b.进位；逢F进1
c.位权：111(16) = 273(10)
d.表示方式：在十六进制数前加0x/0X
e.转换：hex()
运算符 &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;python运算符有数学运算符、比较运算符、逻辑运算符、位运算符、赋值运算符
数学运算符 &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;数学运算符：(求和)+，（求差）-，（求积）*，（求商）/，（求余）%，（幂运算）**，（整除）//
&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;+，-，*，/和数学中的+, -, ×, ÷一样，而%是求商余数，**是求次方，//是求商的整数</description>
    </item>
    
    <item>
      <title>Python PIL</title>
      <link>https://snowdream87.github.io/python-pil/</link>
      <pubDate>Sun, 21 Jul 2019 17:12:47 +0800</pubDate>
      
      <guid>https://snowdream87.github.io/python-pil/</guid>
      <description>&amp;emsp;&amp;emsp;PIL是Python第三方图像处理库，该功能强大可以对图像进行很多处理，比如图像剪切、粘贴、滤镜、缩略图、镜像、图片呈现方式、旋转等功能。
在使用PIL是我们也要与Image，Imagefilter这两个库配合使用。以下就是一些PIL的简单教程实例。
#我先创建一个空白图片出来，方便我将处理后的图片粘贴在上面 #Image.new(模式，大小，颜色) whileImage = Image.new(&#39;RGB&#39;, (1366, 768), (255, 255, 255)) #加载图像，图片对象 = Image.open（图片路径） image = Image.open(&#39;image/0201.jpg&#39;) #再获取到图片的宽和搞 width, height = image.size #用thumbnail（）方法将图像像素改为以下值 image.thumbnail((455, 256)) #将图片对象用filter方法进行滤镜处理。同时再新建一个图片对象 #并且将滤镜处理后的图片放入该对像，以下是几种滤镜效果 #ImageFilter.EMBOSS - 浮雕效果 #ImageFilter.FIND_EDGES - 泼墨效果 #ImageFilter.SHARPEN - 锐化滤波 #ImageFilter.SMOOTH - 平滑滤波 #ImageFilter.EDGE_ENHANCE_MORE - 边界增强滤波（程度更深） #ImageFilter.EDGE_ENHANCE - 边界增强滤波 #ImageFilter.DETAIL - 细节滤波 #ImageFilter.CONTOUR - 轮廓滤波(铅笔画) #ImageFilter.BLUR - 模糊滤波 image_1 = image.filter(ImageFilter.EMBOSS) image_2 = image.filter(ImageFilter.FIND_EDGES) image_3 = image.filter(ImageFilter.SHARPEN) image_4 = image.filter(ImageFilter.SMOOTH) image_5 = image.filter(ImageFilter.EDGE_ENHANCE_MORE) image_6 = image.</description>
    </item>
    
    <item>
      <title>Dream</title>
      <link>https://snowdream87.github.io/dream/</link>
      <pubDate>Sat, 20 Jul 2019 16:55:12 +0800</pubDate>
      
      <guid>https://snowdream87.github.io/dream/</guid>
      <description>hello world ！ nice to meet you !</description>
    </item>
    
    <item>
      <title>Python Turtle</title>
      <link>https://snowdream87.github.io/python-turtle/</link>
      <pubDate>Sat, 20 Jul 2019 16:10:49 +0800</pubDate>
      
      <guid>https://snowdream87.github.io/python-turtle/</guid>
      <description>&amp;emsp;&amp;emsp;Turtle，是python中专门绘画的一个库，turtle分为了三大部分，画布、画笔、以及对画笔的控制。这三大部分都需要我们来编写 Python代码来进行设计及控制。其中就涉及到对画布设置，画笔设置，和画笔方向和状态的控制。只需要控制好这三个要素就可以画出你自己想画出的图案、卡通人物等。
&amp;emsp;&amp;emsp;首先，设置画布的窗口的大小可以使用turtle.setup（宽度， 高度）来设置窗口大小，如果想设置窗口背景的则需要用turtle.screensize(宽度， 高度, 背景颜色)。
&amp;emsp;&amp;emsp;有了窗口视图后我们就可以来设置画笔，画笔中可以设置画笔的颜色和线的宽度，以及画笔的速度。若不设置，则为画笔的认值。turtle.pencolor(颜色)，turtle.width()，turtle.speed()，三者分别可以设置逼得颜色，线的宽度和，画笔速度。 而turtle.speed()：速度值为1-10。这几点就是对画笔的基本设置。
&amp;emsp;&amp;emsp;有了画布和画笔后就可以对其画画，而画时需要注意的是：再画的过程中画笔和画布是一直挨着一起的。造成画的过程中都是一直连成，这样显然不合适。因此我们就需要对画笔的状态进行控制，和生活中一样，两种状态起笔和落笔&amp;emsp;turtle.up()，turtle.down()。这样就可以随心所欲了。
&amp;emsp;&amp;emsp;最后就是对画笔的方向的控制了，在turtle中方向分为 ，向前（&amp;emsp;turtle.forword(距离)&amp;emsp;）、向后(&amp;emsp;turtle.back()&amp;emsp;)、向左(&amp;emsp;turtle.left()&amp;emsp;)、向右(&amp;emsp;turtle.right()&amp;emsp;)，四个方向。同时turtle.home()可以回到原点，turtle.goto(x坐标，y坐标)指定的位置。最后需要程序一直运行可以使用turtle.mainloop()即可。</description>
    </item>
    
  </channel>
</rss>